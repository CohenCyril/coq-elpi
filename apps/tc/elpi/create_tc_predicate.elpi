/* license: GNU Lesser General Public License Version 2.1 or later           */
/* ------------------------------------------------------------------------- */
pred string->coq-mode i:string, o:hint-mode.
string->coq-mode "!" mode-ground :- !.
string->coq-mode "+" mode-input :- !.
string->coq-mode "-" mode-output :- !.

string->coq-mode "i" mode-ground :- !.
string->coq-mode "o" mode-output :- !.
string->coq-mode A _ :- coq.error A "is not a valid mode".

pred coq-mode->elpi i:hint-mode, o:pair argument_mode string.
:name "coq-mode->elpi"
coq-mode->elpi mode-ground (pr in "term").
coq-mode->elpi mode-input (pr in "term").
coq-mode->elpi mode-output (pr out "term").

pred modes-of-class i:gref, o:list (pair argument_mode string).
modes-of-class ClassGr Modes :- 
  coq.hints.modes ClassGr "typeclass_instances" CoqModesList,
  not (CoqModesList = []),
  std.assert! (CoqModesList = [HintModesFst]) "At the moment we only allow TC with one Hint Mode",
  std.append {std.map HintModesFst coq-mode->elpi} [pr out "term"] Modes.
modes-of-class ClassGr Modes :- 
  coq.env.typeof ClassGr ClassTy,
  N is {coq.count-prods ClassTy} + 1, % + 1 for the solution
  list-init N (x\r\ r = (pr out "term")) Modes.

pred add-class-gr i:search-mode, i:gref.
add-class-gr SearchMode ClassGR :-
  std.assert! (coq.TC.class? ClassGR) "Only gref of type classes can be added as new predicates",
  if (class ClassGR _ _) true 
    (modes-of-class ClassGR Modes, 
      gref->pred-name ClassGR PredName,
      coq.elpi.add-predicate "tc.db" _ PredName Modes,
      add-tc-db _ _ (tc-mode ClassGR Modes),
      @global! => add-tc-db _ _ (class ClassGR PredName SearchMode)).

pred add-class-str i:search-mode, i:string.
add-class-str SearchMode ClassStr :-
  coq.locate ClassStr ClassGR,
  add-class-gr SearchMode ClassGR.

% Following are predicates for TC.declare

pred attr->deterministic o:search-mode. 
attr->deterministic deterministic :- get-option "deterministic" tt, !.
attr->deterministic classic.

pred attr->modes o:list hint-mode.
attr->modes CoqModes :- 
  get-option "mode" L,
  std.map L get-key-from-option RawModes, 
  std.map RawModes string->coq-mode CoqModes, !.
attr->modes [].

pred get-key-from-option i:prop, o:string. 
get-key-from-option (get-option A tt) A :- !.
get-key-from-option (get-option "i" ff) "o" :- !.
get-key-from-option (get-option "o" ff) "i" :- !.
get-key-from-option A _ :- coq.error A "should be an option".

pred declare-class-in-coq i:gref.
declare-class-in-coq ClassGR :- 
  attr->modes CoqModes,
  if (CoqModes = []) true 
    (@global! => coq.hints.add-mode ClassGR "typeclass_instances" CoqModes),
  coq.TC.declare-class ClassGR,
  attr->deterministic SearchMode, 
  gref->pred-name ClassGR PredName,
  @global! => add-tc-db _ (after "0") (class ClassGR PredName SearchMode).

pred declare-class i:indt-decl. 
declare-class D :- !, 
  coq.env.add-indt D I,
  coq.parse-attributes {attributes} 
    [ att "mode" attlist, att "deterministic" bool ] Opts,
  Opts => declare-class-in-coq (indt I).